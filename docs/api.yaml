openapi: 3.0.1
info:
  title: NETtheFLIX Api
  version: 1.0.0
servers:
  - url: http://localhost:80
tags:
  - name: Auth
  - name: Films
  # - name: Movies
  # - name: Serials

paths:

# Auth

  /auth/signup:
    post:
      tags:
        - Auth
      summary: Register new user
      security:
        - AccessCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '200':
          description: Success
          headers:
            Set-Cookie (access):
              description: Access token
              schema:
                type: string
                example: access=sfggafga.SDFDGsf.dsFdFDD; Path=/; HttpOnly; Secure
            Set-Cookie (refresh):
              description: Refresh token
              schema:
                type: string
                example: refresh=sfggafga.SDFDGsf.dsFdFDD; Path=/auth; HttpOnly; Secure
          content:
            application/form:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          description: Invalid data recieved or user already exists
          content:
            application/form:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '500':
          description: Internal server error
          content:
            application/form:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        default:
          description: Unknown error
          
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Success
          headers:
            Set-Cookie (access):
              description: Access token
              schema:
                type: string
                example: access=sfggafga.SDFDGsf.dsFdFDD; Path=/; HttpOnly; Secure
            Set-Cookie (refresh):
              description: Refresh token
              schema:
                type: string
                example: refresh=sfggafga.SDFDGsf.dsFdFDD; Path=/auth; HttpOnly; Secure
          content:
            application/form:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          description:  User doesn't exists or incorrect login or password
          content:
            application/form:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '500':
          description: Internal server error
          content:
            application/form:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        default:
          description: Unknown error

  /auth/check:
    post:
      tags:
        - Auth
      summary: Check for valid session
      security:
        - AccessCookie: []
        - RefreshCookie: []
      responses:
        '200':
          description: Success (regenerate tokens if access expired)
          headers:
            Set-Cookie (access):
              description: Access token
              schema:
                type: string
                example: access=sfggafga.SDFDGsf.dsFdFDD; Path=/; HttpOnly; Secure
            Set-Cookie (refresh):
              description: Refresh token
              schema:
                type: string
                example: refresh=sfggafga.SDFDGsf.dsFdFDD; Path=/auth; HttpOnly; Secure
          content:
            application/form:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '401':
          description:  Not authorized
          content:
            application/form:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '500':
          description: Internal server error
          content:
            application/form:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        default:
          description: Unknown error

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout user
      security:
        - RefreshCookie: []
      responses:
        '200':
          description: Success
          content:
            application/form:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '401':
          description:  Not authorized
          content:
            application/form:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '500':
          description: Internal server error
          content:
            application/form:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        default:
          description: Unknown error     
     
# Films

  /films/all:
    get:
      tags:
        - Films
      summary: Get all films
      security:
        - AccessCookie: []
      responses:
        '200':
          description: Success
          content:
            application/form:
              schema:
                $ref: '#/components/schemas/FilmsResponse'
        '401':
          description: Not authorized
          content:
            application/form:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '500':
          description: Internal server error
          content:
            application/form:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        default:
          description: Unknown error
              
components:

# Cookies

  securitySchemes:

    AccessCookie:
      type: apiKey
      in: cookie
      name: access

    RefreshCookie:
      type: apiKey
      in: cookie
      name: refresh

# Requests & responses 

  schemas:

    StatusResponse:
      required:
        - status
      properties:
        status:
          type: integer
          example: 200
        error:
          type: string

#Auth

    SignupRequest:
      required:
        - login
        - username
        - password
      properties:
        login:
          type: string
          example: 'nagibator@yandex.ru'
        username:
          type: string
          example: 'XXX_nagibator_XXX'
        password:
          type: string
          example: 'root'

    LoginRequest:
      required:
        - login
        - password
      properties:
        login:
          type: string
          example: 'nagibator@yandex.ru'
        password:
          type: string
          example: 'root'

# Films

    FilmsResponse:
      required:
        - films
      properties:
        films:
          type: array
          items:
            type: object
            required:
              - status
              - preview_data
              - name
              - author
              - average_score
              - scores_count
              - duration
            properties:
              status:
                type: integer
                example: 200
              preview_data:
                type: string
              name:
                type: string
                example: 'Transformers'
              author:
                type: string
                example: 'Michael Bell'
              average_score:
                type: integer
                example: 4
                pattern: '[0-5]'
              scores_count:
                type: integer
                example: 20324
              duration:
                type: integer
                example: 7560