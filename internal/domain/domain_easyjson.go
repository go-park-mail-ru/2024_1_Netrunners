// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain(in *jlexer.Lexer, out *UserSignUp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Email = string(in.String())
		case "username":
			out.Name = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain(out *jwriter.Writer, in UserSignUp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserSignUp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserSignUp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserSignUp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserSignUp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain1(in *jlexer.Lexer, out *UserPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Uuid":
			out.Uuid = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain1(out *jwriter.Writer, in UserPreview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserPreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserPreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserPreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserPreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain1(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain2(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "login":
			out.Email = string(in.String())
		case "username":
			out.Name = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "version":
			out.Version = uint32(in.Uint32())
		case "isAdmin":
			out.IsAdmin = bool(in.Bool())
		case "avatar":
			out.Avatar = string(in.String())
		case "registeredAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RegisteredAt).UnmarshalJSON(data))
			}
		case "birthday":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Birthday).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain2(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Version))
	}
	{
		const prefix string = ",\"isAdmin\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAdmin))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"registeredAt\":"
		out.RawString(prefix)
		out.Raw((in.RegisteredAt).MarshalJSON())
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.Raw((in.Birthday).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain2(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain3(in *jlexer.Lexer, out *TopFilmsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "films":
			if in.IsNull() {
				in.Skip()
				out.Films = nil
			} else {
				in.Delim('[')
				if out.Films == nil {
					if !in.IsDelim(']') {
						out.Films = make([]TopFilm, 0, 0)
					} else {
						out.Films = []TopFilm{}
					}
				} else {
					out.Films = (out.Films)[:0]
				}
				for !in.IsDelim(']') {
					var v1 TopFilm
					(v1).UnmarshalEasyJSON(in)
					out.Films = append(out.Films, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain3(out *jwriter.Writer, in TopFilmsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"films\":"
		out.RawString(prefix)
		if in.Films == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Films {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TopFilmsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TopFilmsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TopFilmsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TopFilmsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain3(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain4(in *jlexer.Lexer, out *TopFilm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "isSerial":
			out.IsSerial = bool(in.Bool())
		case "title":
			out.Title = string(in.String())
		case "preview_data":
			out.Preview = string(in.String())
		case "data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain4(out *jwriter.Writer, in TopFilm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"isSerial\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSerial))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"preview_data\":"
		out.RawString(prefix)
		out.String(string(in.Preview))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TopFilm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TopFilm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TopFilm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TopFilm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain4(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain5(in *jlexer.Lexer, out *ShortSearchResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "films":
			if in.IsNull() {
				in.Skip()
				out.Films = nil
			} else {
				in.Delim('[')
				if out.Films == nil {
					if !in.IsDelim(']') {
						out.Films = make([]FilmPreview, 0, 0)
					} else {
						out.Films = []FilmPreview{}
					}
				} else {
					out.Films = (out.Films)[:0]
				}
				for !in.IsDelim(']') {
					var v4 FilmPreview
					(v4).UnmarshalEasyJSON(in)
					out.Films = append(out.Films, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "actors":
			if in.IsNull() {
				in.Skip()
				out.Actors = nil
			} else {
				in.Delim('[')
				if out.Actors == nil {
					if !in.IsDelim(']') {
						out.Actors = make([]ActorPreview, 0, 1)
					} else {
						out.Actors = []ActorPreview{}
					}
				} else {
					out.Actors = (out.Actors)[:0]
				}
				for !in.IsDelim(']') {
					var v5 ActorPreview
					(v5).UnmarshalEasyJSON(in)
					out.Actors = append(out.Actors, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain5(out *jwriter.Writer, in ShortSearchResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"films\":"
		out.RawString(prefix)
		if in.Films == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Films {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"actors\":"
		out.RawString(prefix)
		if in.Actors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Actors {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShortSearchResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShortSearchResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShortSearchResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShortSearchResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain5(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain6(in *jlexer.Lexer, out *SerialData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "isSerial":
			out.IsSerial = bool(in.Bool())
		case "preview":
			out.Preview = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "seasons":
			if in.IsNull() {
				in.Skip()
				out.Seasons = nil
			} else {
				in.Delim('[')
				if out.Seasons == nil {
					if !in.IsDelim(']') {
						out.Seasons = make([]Season, 0, 2)
					} else {
						out.Seasons = []Season{}
					}
				} else {
					out.Seasons = (out.Seasons)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Season
					(v10).UnmarshalEasyJSON(in)
					out.Seasons = append(out.Seasons, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "director":
			out.Director = string(in.String())
		case "averageScore":
			out.AverageScore = float32(in.Float32())
		case "scoresCount":
			out.ScoresCount = uint64(in.Uint64())
		case "duration":
			out.Duration = uint32(in.Uint32())
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "data":
			out.Data = string(in.String())
		case "ageLimit":
			out.AgeLimit = uint32(in.Uint32())
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]Genre, 0, 2)
					} else {
						out.Genres = []Genre{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v11 Genre
					(v11).UnmarshalEasyJSON(in)
					out.Genres = append(out.Genres, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain6(out *jwriter.Writer, in SerialData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"isSerial\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSerial))
	}
	{
		const prefix string = ",\"preview\":"
		out.RawString(prefix)
		out.String(string(in.Preview))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"seasons\":"
		out.RawString(prefix)
		if in.Seasons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Seasons {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"director\":"
		out.RawString(prefix)
		out.String(string(in.Director))
	}
	{
		const prefix string = ",\"averageScore\":"
		out.RawString(prefix)
		out.Float32(float32(in.AverageScore))
	}
	{
		const prefix string = ",\"scoresCount\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ScoresCount))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Duration))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"ageLimit\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.AgeLimit))
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Genres {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain6(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain7(in *jlexer.Lexer, out *Season) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "series":
			if in.IsNull() {
				in.Skip()
				out.Series = nil
			} else {
				in.Delim('[')
				if out.Series == nil {
					if !in.IsDelim(']') {
						out.Series = make([]Episode, 0, 2)
					} else {
						out.Series = []Episode{}
					}
				} else {
					out.Series = (out.Series)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Episode
					(v16).UnmarshalEasyJSON(in)
					out.Series = append(out.Series, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain7(out *jwriter.Writer, in Season) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"series\":"
		out.RawString(prefix[1:])
		if in.Series == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Series {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Season) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Season) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Season) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Season) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain7(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain8(in *jlexer.Lexer, out *SearchFilms) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "films":
			if in.IsNull() {
				in.Skip()
				out.Films = nil
			} else {
				in.Delim('[')
				if out.Films == nil {
					if !in.IsDelim(']') {
						out.Films = make([]FilmData, 0, 0)
					} else {
						out.Films = []FilmData{}
					}
				} else {
					out.Films = (out.Films)[:0]
				}
				for !in.IsDelim(']') {
					var v19 FilmData
					(v19).UnmarshalEasyJSON(in)
					out.Films = append(out.Films, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "count":
			out.Count = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain8(out *jwriter.Writer, in SearchFilms) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"films\":"
		out.RawString(prefix[1:])
		if in.Films == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Films {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchFilms) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchFilms) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchFilms) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchFilms) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain8(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain9(in *jlexer.Lexer, out *SearchActors) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "actors":
			if in.IsNull() {
				in.Skip()
				out.Actors = nil
			} else {
				in.Delim('[')
				if out.Actors == nil {
					if !in.IsDelim(']') {
						out.Actors = make([]ActorData, 0, 0)
					} else {
						out.Actors = []ActorData{}
					}
				} else {
					out.Actors = (out.Actors)[:0]
				}
				for !in.IsDelim(']') {
					var v22 ActorData
					(v22).UnmarshalEasyJSON(in)
					out.Actors = append(out.Actors, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "count":
			out.Count = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain9(out *jwriter.Writer, in SearchActors) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"actors\":"
		out.RawString(prefix[1:])
		if in.Actors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Actors {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchActors) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchActors) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchActors) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchActors) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain9(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain10(in *jlexer.Lexer, out *ProfileResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "user":
			(out.UserInfo).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain10(out *jwriter.Writer, in ProfileResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(in.UserInfo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain10(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain11(in *jlexer.Lexer, out *ProfilePreviewResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "user":
			(out.UserPreview).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain11(out *jwriter.Writer, in ProfilePreviewResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(in.UserPreview).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfilePreviewResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfilePreviewResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfilePreviewResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfilePreviewResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain11(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain12(in *jlexer.Lexer, out *LongSearchResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "films":
			if in.IsNull() {
				in.Skip()
				out.Films = nil
			} else {
				in.Delim('[')
				if out.Films == nil {
					if !in.IsDelim(']') {
						out.Films = make([]FilmData, 0, 0)
					} else {
						out.Films = []FilmData{}
					}
				} else {
					out.Films = (out.Films)[:0]
				}
				for !in.IsDelim(']') {
					var v25 FilmData
					(v25).UnmarshalEasyJSON(in)
					out.Films = append(out.Films, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "actors":
			if in.IsNull() {
				in.Skip()
				out.Actors = nil
			} else {
				in.Delim('[')
				if out.Actors == nil {
					if !in.IsDelim(']') {
						out.Actors = make([]ActorData, 0, 0)
					} else {
						out.Actors = []ActorData{}
					}
				} else {
					out.Actors = (out.Actors)[:0]
				}
				for !in.IsDelim(']') {
					var v26 ActorData
					(v26).UnmarshalEasyJSON(in)
					out.Actors = append(out.Actors, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "searchResCount":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain12(out *jwriter.Writer, in LongSearchResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"films\":"
		out.RawString(prefix)
		if in.Films == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Films {
				if v27 > 0 {
					out.RawByte(',')
				}
				(v28).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"actors\":"
		out.RawString(prefix)
		if in.Actors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Actors {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"searchResCount\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LongSearchResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LongSearchResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LongSearchResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LongSearchResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain12(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain13(in *jlexer.Lexer, out *GenresResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.GenresFilms = nil
			} else {
				in.Delim('[')
				if out.GenresFilms == nil {
					if !in.IsDelim(']') {
						out.GenresFilms = make([]GenreFilms, 0, 1)
					} else {
						out.GenresFilms = []GenreFilms{}
					}
				} else {
					out.GenresFilms = (out.GenresFilms)[:0]
				}
				for !in.IsDelim(']') {
					var v31 GenreFilms
					(v31).UnmarshalEasyJSON(in)
					out.GenresFilms = append(out.GenresFilms, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain13(out *jwriter.Writer, in GenresResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.GenresFilms == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.GenresFilms {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenresResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenresResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenresResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenresResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain13(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain14(in *jlexer.Lexer, out *GenreFilms) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "genre":
			out.Name = string(in.String())
		case "genreUuid":
			out.Uuid = string(in.String())
		case "films":
			if in.IsNull() {
				in.Skip()
				out.Films = nil
			} else {
				in.Delim('[')
				if out.Films == nil {
					if !in.IsDelim(']') {
						out.Films = make([]FilmPreview, 0, 0)
					} else {
						out.Films = []FilmPreview{}
					}
				} else {
					out.Films = (out.Films)[:0]
				}
				for !in.IsDelim(']') {
					var v34 FilmPreview
					(v34).UnmarshalEasyJSON(in)
					out.Films = append(out.Films, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain14(out *jwriter.Writer, in GenreFilms) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"genre\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"genreUuid\":"
		out.RawString(prefix)
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"films\":"
		out.RawString(prefix)
		if in.Films == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Films {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenreFilms) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenreFilms) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenreFilms) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenreFilms) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain14(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain15(in *jlexer.Lexer, out *Genre) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "genreName":
			out.Name = string(in.String())
		case "genreUuid":
			out.Uuid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain15(out *jwriter.Writer, in Genre) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"genreName\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"genreUuid\":"
		out.RawString(prefix)
		out.String(string(in.Uuid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Genre) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Genre) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Genre) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Genre) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain15(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain16(in *jlexer.Lexer, out *FilmsPreviewsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "films":
			if in.IsNull() {
				in.Skip()
				out.Films = nil
			} else {
				in.Delim('[')
				if out.Films == nil {
					if !in.IsDelim(']') {
						out.Films = make([]FilmPreview, 0, 0)
					} else {
						out.Films = []FilmPreview{}
					}
				} else {
					out.Films = (out.Films)[:0]
				}
				for !in.IsDelim(']') {
					var v37 FilmPreview
					(v37).UnmarshalEasyJSON(in)
					out.Films = append(out.Films, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain16(out *jwriter.Writer, in FilmsPreviewsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"films\":"
		out.RawString(prefix)
		if in.Films == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Films {
				if v38 > 0 {
					out.RawByte(',')
				}
				(v39).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmsPreviewsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmsPreviewsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmsPreviewsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmsPreviewsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain16(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain17(in *jlexer.Lexer, out *FilmToAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filmData":
			(out.FilmData).UnmarshalEasyJSON(in)
		case "actors":
			if in.IsNull() {
				in.Skip()
				out.Actors = nil
			} else {
				in.Delim('[')
				if out.Actors == nil {
					if !in.IsDelim(']') {
						out.Actors = make([]ActorToAdd, 0, 0)
					} else {
						out.Actors = []ActorToAdd{}
					}
				} else {
					out.Actors = (out.Actors)[:0]
				}
				for !in.IsDelim(']') {
					var v40 ActorToAdd
					(v40).UnmarshalEasyJSON(in)
					out.Actors = append(out.Actors, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "directorToAdd":
			(out.DirectorToAdd).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain17(out *jwriter.Writer, in FilmToAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filmData\":"
		out.RawString(prefix[1:])
		(in.FilmData).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"actors\":"
		out.RawString(prefix)
		if in.Actors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Actors {
				if v41 > 0 {
					out.RawByte(',')
				}
				(v42).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"directorToAdd\":"
		out.RawString(prefix)
		(in.DirectorToAdd).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmToAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmToAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmToAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmToAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain17(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain18(in *jlexer.Lexer, out *FilmPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "isSerial":
			out.IsSerial = bool(in.Bool())
		case "preview_data":
			out.Preview = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "author":
			out.Director = string(in.String())
		case "average_score":
			out.AverageScore = float32(in.Float32())
		case "scores_count":
			out.ScoresCount = uint64(in.Uint64())
		case "duration":
			out.Duration = uint32(in.Uint32())
		case "ageLimit":
			out.AgeLimit = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain18(out *jwriter.Writer, in FilmPreview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"isSerial\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSerial))
	}
	{
		const prefix string = ",\"preview_data\":"
		out.RawString(prefix)
		out.String(string(in.Preview))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Director))
	}
	{
		const prefix string = ",\"average_score\":"
		out.RawString(prefix)
		out.Float32(float32(in.AverageScore))
	}
	{
		const prefix string = ",\"scores_count\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ScoresCount))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Duration))
	}
	{
		const prefix string = ",\"ageLimit\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.AgeLimit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmPreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmPreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmPreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmPreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain18(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain19(in *jlexer.Lexer, out *FilmDataToAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "isSerial":
			out.IsSerial = bool(in.Bool())
		case "preview":
			out.Preview = string(in.String())
		case "director":
			out.Director = string(in.String())
		case "data":
			out.Data = string(in.String())
		case "ageLimit":
			out.AgeLimit = uint32(in.Uint32())
		case "duration":
			out.Duration = uint32(in.Uint32())
		case "publishedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PublishedAt).UnmarshalJSON(data))
			}
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]string, 0, 4)
					} else {
						out.Genres = []string{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v43 string
					v43 = string(in.String())
					out.Genres = append(out.Genres, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "link":
			out.Link = string(in.String())
		case "seasons":
			if in.IsNull() {
				in.Skip()
				out.Seasons = nil
			} else {
				in.Delim('[')
				if out.Seasons == nil {
					if !in.IsDelim(']') {
						out.Seasons = make([]Season, 0, 2)
					} else {
						out.Seasons = []Season{}
					}
				} else {
					out.Seasons = (out.Seasons)[:0]
				}
				for !in.IsDelim(']') {
					var v44 Season
					(v44).UnmarshalEasyJSON(in)
					out.Seasons = append(out.Seasons, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain19(out *jwriter.Writer, in FilmDataToAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"isSerial\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSerial))
	}
	{
		const prefix string = ",\"preview\":"
		out.RawString(prefix)
		out.String(string(in.Preview))
	}
	{
		const prefix string = ",\"director\":"
		out.RawString(prefix)
		out.String(string(in.Director))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"ageLimit\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.AgeLimit))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Duration))
	}
	{
		const prefix string = ",\"publishedAt\":"
		out.RawString(prefix)
		out.Raw((in.PublishedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v45, v46 := range in.Genres {
				if v45 > 0 {
					out.RawByte(',')
				}
				out.String(string(v46))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	if len(in.Seasons) != 0 {
		const prefix string = ",\"seasons\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v47, v48 := range in.Seasons {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmDataToAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmDataToAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmDataToAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmDataToAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain19(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain20(in *jlexer.Lexer, out *FilmDataResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "film":
			if m, ok := out.FilmData.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.FilmData.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.FilmData = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain20(out *jwriter.Writer, in FilmDataResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"film\":"
		out.RawString(prefix)
		if m, ok := in.FilmData.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.FilmData.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.FilmData))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmDataResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmDataResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmDataResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmDataResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain20(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain21(in *jlexer.Lexer, out *FilmData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "isSerial":
			out.IsSerial = bool(in.Bool())
		case "preview":
			out.Preview = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "link":
			out.Link = string(in.String())
		case "director":
			out.Director = string(in.String())
		case "averageScore":
			out.AverageScore = float32(in.Float32())
		case "scoresCount":
			out.ScoresCount = uint64(in.Uint64())
		case "duration":
			out.Duration = uint32(in.Uint32())
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "data":
			out.Data = string(in.String())
		case "ageLimit":
			out.AgeLimit = uint32(in.Uint32())
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]Genre, 0, 2)
					} else {
						out.Genres = []Genre{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v49 Genre
					(v49).UnmarshalEasyJSON(in)
					out.Genres = append(out.Genres, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain21(out *jwriter.Writer, in FilmData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"isSerial\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSerial))
	}
	{
		const prefix string = ",\"preview\":"
		out.RawString(prefix)
		out.String(string(in.Preview))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"director\":"
		out.RawString(prefix)
		out.String(string(in.Director))
	}
	{
		const prefix string = ",\"averageScore\":"
		out.RawString(prefix)
		out.Float32(float32(in.AverageScore))
	}
	{
		const prefix string = ",\"scoresCount\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ScoresCount))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Duration))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"ageLimit\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.AgeLimit))
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Genres {
				if v50 > 0 {
					out.RawByte(',')
				}
				(v51).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain21(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain22(in *jlexer.Lexer, out *FilmCommentsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "comments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				in.Delim('[')
				if out.Comments == nil {
					if !in.IsDelim(']') {
						out.Comments = make([]Comment, 0, 0)
					} else {
						out.Comments = []Comment{}
					}
				} else {
					out.Comments = (out.Comments)[:0]
				}
				for !in.IsDelim(']') {
					var v52 Comment
					(v52).UnmarshalEasyJSON(in)
					out.Comments = append(out.Comments, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain22(out *jwriter.Writer, in FilmCommentsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		if in.Comments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Comments {
				if v53 > 0 {
					out.RawByte(',')
				}
				(v54).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmCommentsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmCommentsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmCommentsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmCommentsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain22(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain23(in *jlexer.Lexer, out *FilmActorsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "actors":
			if in.IsNull() {
				in.Skip()
				out.Actors = nil
			} else {
				in.Delim('[')
				if out.Actors == nil {
					if !in.IsDelim(']') {
						out.Actors = make([]ActorPreview, 0, 1)
					} else {
						out.Actors = []ActorPreview{}
					}
				} else {
					out.Actors = (out.Actors)[:0]
				}
				for !in.IsDelim(']') {
					var v55 ActorPreview
					(v55).UnmarshalEasyJSON(in)
					out.Actors = append(out.Actors, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain23(out *jwriter.Writer, in FilmActorsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"actors\":"
		out.RawString(prefix)
		if in.Actors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.Actors {
				if v56 > 0 {
					out.RawByte(',')
				}
				(v57).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmActorsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmActorsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmActorsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmActorsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain23(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain24(in *jlexer.Lexer, out *Episode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "link":
			out.Link = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain24(out *jwriter.Writer, in Episode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Episode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Episode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Episode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Episode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain24(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain25(in *jlexer.Lexer, out *DirectorToAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Avatar":
			out.Avatar = string(in.String())
		case "Birthday":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Birthday).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain25(out *jwriter.Writer, in DirectorToAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"Birthday\":"
		out.RawString(prefix)
		out.Raw((in.Birthday).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DirectorToAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DirectorToAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DirectorToAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DirectorToAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain25(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain26(in *jlexer.Lexer, out *DataToFavorite) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filmUuid":
			out.FilmUuid = string(in.String())
		case "userUuid":
			out.UserUuid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain26(out *jwriter.Writer, in DataToFavorite) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filmUuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.FilmUuid))
	}
	{
		const prefix string = ",\"userUuid\":"
		out.RawString(prefix)
		out.String(string(in.UserUuid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataToFavorite) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataToFavorite) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataToFavorite) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataToFavorite) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain26(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain27(in *jlexer.Lexer, out *CommonFilmData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "isSerial":
			out.IsSerial = bool(in.Bool())
		case "preview":
			out.Preview = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "link":
			out.Link = string(in.String())
		case "director":
			out.Director = string(in.String())
		case "averageScore":
			out.AverageScore = float32(in.Float32())
		case "scoresCount":
			out.ScoresCount = uint64(in.Uint64())
		case "duration":
			out.Duration = uint32(in.Uint32())
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "data":
			out.Data = string(in.String())
		case "ageLimit":
			out.AgeLimit = uint32(in.Uint32())
		case "seasons":
			if in.IsNull() {
				in.Skip()
				out.Seasons = nil
			} else {
				in.Delim('[')
				if out.Seasons == nil {
					if !in.IsDelim(']') {
						out.Seasons = make([]Season, 0, 2)
					} else {
						out.Seasons = []Season{}
					}
				} else {
					out.Seasons = (out.Seasons)[:0]
				}
				for !in.IsDelim(']') {
					var v58 Season
					(v58).UnmarshalEasyJSON(in)
					out.Seasons = append(out.Seasons, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]Genre, 0, 2)
					} else {
						out.Genres = []Genre{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v59 Genre
					(v59).UnmarshalEasyJSON(in)
					out.Genres = append(out.Genres, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain27(out *jwriter.Writer, in CommonFilmData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"isSerial\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSerial))
	}
	{
		const prefix string = ",\"preview\":"
		out.RawString(prefix)
		out.String(string(in.Preview))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"director\":"
		out.RawString(prefix)
		out.String(string(in.Director))
	}
	{
		const prefix string = ",\"averageScore\":"
		out.RawString(prefix)
		out.Float32(float32(in.AverageScore))
	}
	{
		const prefix string = ",\"scoresCount\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ScoresCount))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Duration))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"ageLimit\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.AgeLimit))
	}
	{
		const prefix string = ",\"seasons\":"
		out.RawString(prefix)
		if in.Seasons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v60, v61 := range in.Seasons {
				if v60 > 0 {
					out.RawByte(',')
				}
				(v61).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v62, v63 := range in.Genres {
				if v62 > 0 {
					out.RawByte(',')
				}
				(v63).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommonFilmData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommonFilmData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommonFilmData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommonFilmData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain27(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain28(in *jlexer.Lexer, out *CommentToRemove) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filmUuid":
			out.FilmUuid = string(in.String())
		case "authorUuid":
			out.AuthorUuid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain28(out *jwriter.Writer, in CommentToRemove) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filmUuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.FilmUuid))
	}
	{
		const prefix string = ",\"authorUuid\":"
		out.RawString(prefix)
		out.String(string(in.AuthorUuid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentToRemove) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentToRemove) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentToRemove) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentToRemove) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain28(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain29(in *jlexer.Lexer, out *CommentToAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filmUuid":
			out.FilmUuid = string(in.String())
		case "authorUuid":
			out.AuthorUuid = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "score":
			out.Score = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain29(out *jwriter.Writer, in CommentToAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filmUuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.FilmUuid))
	}
	{
		const prefix string = ",\"authorUuid\":"
		out.RawString(prefix)
		out.String(string(in.AuthorUuid))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Score))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentToAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentToAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentToAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentToAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain29(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain30(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "filmUuid":
			out.FilmUuid = string(in.String())
		case "authorUuid":
			out.AuthorUuid = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "score":
			out.Score = uint32(in.Uint32())
		case "added_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain30(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"filmUuid\":"
		out.RawString(prefix)
		out.String(string(in.FilmUuid))
	}
	{
		const prefix string = ",\"authorUuid\":"
		out.RawString(prefix)
		out.String(string(in.AuthorUuid))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Score))
	}
	{
		const prefix string = ",\"added_at\":"
		out.RawString(prefix)
		out.Raw((in.AddedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain30(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain31(in *jlexer.Lexer, out *ActorToAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "birthday":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Birthday).UnmarshalJSON(data))
			}
		case "career":
			out.Career = string(in.String())
		case "height":
			out.Height = uint32(in.Uint32())
		case "birthPlace":
			out.BirthPlace = string(in.String())
		case "spouse":
			out.Spouse = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain31(out *jwriter.Writer, in ActorToAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.Raw((in.Birthday).MarshalJSON())
	}
	{
		const prefix string = ",\"career\":"
		out.RawString(prefix)
		out.String(string(in.Career))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Height))
	}
	{
		const prefix string = ",\"birthPlace\":"
		out.RawString(prefix)
		out.String(string(in.BirthPlace))
	}
	{
		const prefix string = ",\"spouse\":"
		out.RawString(prefix)
		out.String(string(in.Spouse))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActorToAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActorToAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActorToAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActorToAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain31(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain32(in *jlexer.Lexer, out *ActorResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "actor":
			(out.Actor).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain32(out *jwriter.Writer, in ActorResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"actor\":"
		out.RawString(prefix)
		(in.Actor).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActorResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActorResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActorResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActorResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain32(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain33(in *jlexer.Lexer, out *ActorPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain33(out *jwriter.Writer, in ActorPreview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActorPreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActorPreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActorPreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActorPreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain33(l, v)
}
func easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain34(in *jlexer.Lexer, out *ActorData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "birthday":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Birthday).UnmarshalJSON(data))
			}
		case "career":
			out.Career = string(in.String())
		case "height":
			out.Height = uint32(in.Uint32())
		case "birthPlace":
			out.BirthPlace = string(in.String())
		case "spouse":
			out.Spouse = string(in.String())
		case "films":
			if in.IsNull() {
				in.Skip()
				out.Films = nil
			} else {
				in.Delim('[')
				if out.Films == nil {
					if !in.IsDelim(']') {
						out.Films = make([]FilmPreview, 0, 0)
					} else {
						out.Films = []FilmPreview{}
					}
				} else {
					out.Films = (out.Films)[:0]
				}
				for !in.IsDelim(']') {
					var v64 FilmPreview
					(v64).UnmarshalEasyJSON(in)
					out.Films = append(out.Films, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain34(out *jwriter.Writer, in ActorData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.Raw((in.Birthday).MarshalJSON())
	}
	{
		const prefix string = ",\"career\":"
		out.RawString(prefix)
		out.String(string(in.Career))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Height))
	}
	{
		const prefix string = ",\"birthPlace\":"
		out.RawString(prefix)
		out.String(string(in.BirthPlace))
	}
	{
		const prefix string = ",\"spouse\":"
		out.RawString(prefix)
		out.String(string(in.Spouse))
	}
	{
		const prefix string = ",\"films\":"
		out.RawString(prefix)
		if in.Films == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.Films {
				if v65 > 0 {
					out.RawByte(',')
				}
				(v66).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActorData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActorData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComGoParkMailRu20241NetrunnersInternalDomain34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActorData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActorData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComGoParkMailRu20241NetrunnersInternalDomain34(l, v)
}
