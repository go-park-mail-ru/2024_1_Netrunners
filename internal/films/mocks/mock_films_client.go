// Code generated by MockGen. DO NOT EDIT.
// Source: internal/session/proto/films_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	session "github.com/go-park-mail-ru/2024_1_Netrunners/internal/session/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFilmsClient is a mock of FilmsClient interface.
type MockFilmsClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilmsClientMockRecorder
}

// MockFilmsClientMockRecorder is the mock recorder for MockFilmsClient.
type MockFilmsClientMockRecorder struct {
	mock *MockFilmsClient
}

// NewMockFilmsClient creates a new mock instance.
func NewMockFilmsClient(ctrl *gomock.Controller) *MockFilmsClient {
	mock := &MockFilmsClient{ctrl: ctrl}
	mock.recorder = &MockFilmsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmsClient) EXPECT() *MockFilmsClientMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockFilmsClient) AddComment(ctx context.Context, in *session.AddCommentRequest, opts ...grpc.CallOption) (*session.AddCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddComment", varargs...)
	ret0, _ := ret[0].(*session.AddCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockFilmsClientMockRecorder) AddComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockFilmsClient)(nil).AddComment), varargs...)
}

// AddFilm mocks base method.
func (m *MockFilmsClient) AddFilm(ctx context.Context, in *session.AddFilmRequest, opts ...grpc.CallOption) (*session.AddFilmResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFilm", varargs...)
	ret0, _ := ret[0].(*session.AddFilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFilm indicates an expected call of AddFilm.
func (mr *MockFilmsClientMockRecorder) AddFilm(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilm", reflect.TypeOf((*MockFilmsClient)(nil).AddFilm), varargs...)
}

// DeleteFavorite mocks base method.
func (m *MockFilmsClient) DeleteFavorite(ctx context.Context, in *session.DeleteFavoriteRequest, opts ...grpc.CallOption) (*session.DeleteFavoriteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFavorite", varargs...)
	ret0, _ := ret[0].(*session.DeleteFavoriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFavorite indicates an expected call of DeleteFavorite.
func (mr *MockFilmsClientMockRecorder) DeleteFavorite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFavorite", reflect.TypeOf((*MockFilmsClient)(nil).DeleteFavorite), varargs...)
}

// FindActorsLong mocks base method.
func (m *MockFilmsClient) FindActorsLong(ctx context.Context, in *session.FindActorsShortRequest, opts ...grpc.CallOption) (*session.FindActorsLongResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindActorsLong", varargs...)
	ret0, _ := ret[0].(*session.FindActorsLongResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActorsLong indicates an expected call of FindActorsLong.
func (mr *MockFilmsClientMockRecorder) FindActorsLong(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActorsLong", reflect.TypeOf((*MockFilmsClient)(nil).FindActorsLong), varargs...)
}

// FindActorsShort mocks base method.
func (m *MockFilmsClient) FindActorsShort(ctx context.Context, in *session.FindActorsShortRequest, opts ...grpc.CallOption) (*session.FindActorsShortResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindActorsShort", varargs...)
	ret0, _ := ret[0].(*session.FindActorsShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActorsShort indicates an expected call of FindActorsShort.
func (mr *MockFilmsClientMockRecorder) FindActorsShort(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActorsShort", reflect.TypeOf((*MockFilmsClient)(nil).FindActorsShort), varargs...)
}

// FindFilmsLong mocks base method.
func (m *MockFilmsClient) FindFilmsLong(ctx context.Context, in *session.FindFilmsShortRequest, opts ...grpc.CallOption) (*session.FindFilmsLongResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindFilmsLong", varargs...)
	ret0, _ := ret[0].(*session.FindFilmsLongResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFilmsLong indicates an expected call of FindFilmsLong.
func (mr *MockFilmsClientMockRecorder) FindFilmsLong(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilmsLong", reflect.TypeOf((*MockFilmsClient)(nil).FindFilmsLong), varargs...)
}

// FindFilmsShort mocks base method.
func (m *MockFilmsClient) FindFilmsShort(ctx context.Context, in *session.FindFilmsShortRequest, opts ...grpc.CallOption) (*session.FindFilmsShortResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindFilmsShort", varargs...)
	ret0, _ := ret[0].(*session.FindFilmsShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFilmsShort indicates an expected call of FindFilmsShort.
func (mr *MockFilmsClientMockRecorder) FindFilmsShort(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilmsShort", reflect.TypeOf((*MockFilmsClient)(nil).FindFilmsShort), varargs...)
}

// FindSerialsLong mocks base method.
func (m *MockFilmsClient) FindSerialsLong(ctx context.Context, in *session.FindFilmsShortRequest, opts ...grpc.CallOption) (*session.FindFilmsLongResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindSerialsLong", varargs...)
	ret0, _ := ret[0].(*session.FindFilmsLongResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSerialsLong indicates an expected call of FindSerialsLong.
func (mr *MockFilmsClientMockRecorder) FindSerialsLong(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSerialsLong", reflect.TypeOf((*MockFilmsClient)(nil).FindSerialsLong), varargs...)
}

// FindSerialsShort mocks base method.
func (m *MockFilmsClient) FindSerialsShort(ctx context.Context, in *session.FindFilmsShortRequest, opts ...grpc.CallOption) (*session.FindFilmsShortResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindSerialsShort", varargs...)
	ret0, _ := ret[0].(*session.FindFilmsShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSerialsShort indicates an expected call of FindSerialsShort.
func (mr *MockFilmsClientMockRecorder) FindSerialsShort(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSerialsShort", reflect.TypeOf((*MockFilmsClient)(nil).FindSerialsShort), varargs...)
}

// GetActorDataByUuid mocks base method.
func (m *MockFilmsClient) GetActorDataByUuid(ctx context.Context, in *session.ActorDataByUuidRequest, opts ...grpc.CallOption) (*session.ActorDataByUuidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActorDataByUuid", varargs...)
	ret0, _ := ret[0].(*session.ActorDataByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorDataByUuid indicates an expected call of GetActorDataByUuid.
func (mr *MockFilmsClientMockRecorder) GetActorDataByUuid(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorDataByUuid", reflect.TypeOf((*MockFilmsClient)(nil).GetActorDataByUuid), varargs...)
}

// GetActorsByFilm mocks base method.
func (m *MockFilmsClient) GetActorsByFilm(ctx context.Context, in *session.ActorsByFilmRequest, opts ...grpc.CallOption) (*session.ActorsByFilmResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActorsByFilm", varargs...)
	ret0, _ := ret[0].(*session.ActorsByFilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsByFilm indicates an expected call of GetActorsByFilm.
func (mr *MockFilmsClientMockRecorder) GetActorsByFilm(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsByFilm", reflect.TypeOf((*MockFilmsClient)(nil).GetActorsByFilm), varargs...)
}

// GetAllFavoriteFilms mocks base method.
func (m *MockFilmsClient) GetAllFavoriteFilms(ctx context.Context, in *session.GetAllFavoriteFilmsRequest, opts ...grpc.CallOption) (*session.GetAllFavoriteFilmsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllFavoriteFilms", varargs...)
	ret0, _ := ret[0].(*session.GetAllFavoriteFilmsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFavoriteFilms indicates an expected call of GetAllFavoriteFilms.
func (mr *MockFilmsClientMockRecorder) GetAllFavoriteFilms(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFavoriteFilms", reflect.TypeOf((*MockFilmsClient)(nil).GetAllFavoriteFilms), varargs...)
}

// GetAllFilmComments mocks base method.
func (m *MockFilmsClient) GetAllFilmComments(ctx context.Context, in *session.AllFilmCommentsRequest, opts ...grpc.CallOption) (*session.AllFilmCommentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllFilmComments", varargs...)
	ret0, _ := ret[0].(*session.AllFilmCommentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilmComments indicates an expected call of GetAllFilmComments.
func (mr *MockFilmsClientMockRecorder) GetAllFilmComments(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmComments", reflect.TypeOf((*MockFilmsClient)(nil).GetAllFilmComments), varargs...)
}

// GetAllFilmsByGenre mocks base method.
func (m *MockFilmsClient) GetAllFilmsByGenre(ctx context.Context, in *session.GetAllFilmsByGenreRequest, opts ...grpc.CallOption) (*session.GetAllFilmsByGenreResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllFilmsByGenre", varargs...)
	ret0, _ := ret[0].(*session.GetAllFilmsByGenreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilmsByGenre indicates an expected call of GetAllFilmsByGenre.
func (mr *MockFilmsClientMockRecorder) GetAllFilmsByGenre(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmsByGenre", reflect.TypeOf((*MockFilmsClient)(nil).GetAllFilmsByGenre), varargs...)
}

// GetAllFilmsPreviews mocks base method.
func (m *MockFilmsClient) GetAllFilmsPreviews(ctx context.Context, in *session.AllFilmsPreviewsRequest, opts ...grpc.CallOption) (*session.AllFilmsPreviewsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllFilmsPreviews", varargs...)
	ret0, _ := ret[0].(*session.AllFilmsPreviewsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilmsPreviews indicates an expected call of GetAllFilmsPreviews.
func (mr *MockFilmsClientMockRecorder) GetAllFilmsPreviews(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmsPreviews", reflect.TypeOf((*MockFilmsClient)(nil).GetAllFilmsPreviews), varargs...)
}

// GetAllGenres mocks base method.
func (m *MockFilmsClient) GetAllGenres(ctx context.Context, in *session.GetAllGenresRequest, opts ...grpc.CallOption) (*session.GetAllGenresResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllGenres", varargs...)
	ret0, _ := ret[0].(*session.GetAllGenresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGenres indicates an expected call of GetAllGenres.
func (mr *MockFilmsClientMockRecorder) GetAllGenres(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGenres", reflect.TypeOf((*MockFilmsClient)(nil).GetAllGenres), varargs...)
}

// GetFilmDataByUuid mocks base method.
func (m *MockFilmsClient) GetFilmDataByUuid(ctx context.Context, in *session.FilmDataByUuidRequest, opts ...grpc.CallOption) (*session.FilmDataByUuidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFilmDataByUuid", varargs...)
	ret0, _ := ret[0].(*session.FilmDataByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmDataByUuid indicates an expected call of GetFilmDataByUuid.
func (mr *MockFilmsClientMockRecorder) GetFilmDataByUuid(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmDataByUuid", reflect.TypeOf((*MockFilmsClient)(nil).GetFilmDataByUuid), varargs...)
}

// GetFilmPreviewByUuid mocks base method.
func (m *MockFilmsClient) GetFilmPreviewByUuid(ctx context.Context, in *session.FilmPreviewByUuidRequest, opts ...grpc.CallOption) (*session.FilmPreviewByUuidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFilmPreviewByUuid", varargs...)
	ret0, _ := ret[0].(*session.FilmPreviewByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmPreviewByUuid indicates an expected call of GetFilmPreviewByUuid.
func (mr *MockFilmsClientMockRecorder) GetFilmPreviewByUuid(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmPreviewByUuid", reflect.TypeOf((*MockFilmsClient)(nil).GetFilmPreviewByUuid), varargs...)
}

// GetFilmsPreviewsWithSub mocks base method.
func (m *MockFilmsClient) GetFilmsPreviewsWithSub(ctx context.Context, in *session.AllFilmsPreviewsRequest, opts ...grpc.CallOption) (*session.AllFilmsPreviewsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFilmsPreviewsWithSub", varargs...)
	ret0, _ := ret[0].(*session.AllFilmsPreviewsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmsPreviewsWithSub indicates an expected call of GetFilmsPreviewsWithSub.
func (mr *MockFilmsClientMockRecorder) GetFilmsPreviewsWithSub(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsPreviewsWithSub", reflect.TypeOf((*MockFilmsClient)(nil).GetFilmsPreviewsWithSub), varargs...)
}

// GetTopFilms mocks base method.
func (m *MockFilmsClient) GetTopFilms(ctx context.Context, in *session.GetTopFilmsRequest, opts ...grpc.CallOption) (*session.GetTopFilmsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTopFilms", varargs...)
	ret0, _ := ret[0].(*session.GetTopFilmsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopFilms indicates an expected call of GetTopFilms.
func (mr *MockFilmsClientMockRecorder) GetTopFilms(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopFilms", reflect.TypeOf((*MockFilmsClient)(nil).GetTopFilms), varargs...)
}

// PutFavorite mocks base method.
func (m *MockFilmsClient) PutFavorite(ctx context.Context, in *session.PutFavoriteRequest, opts ...grpc.CallOption) (*session.PutFavoriteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutFavorite", varargs...)
	ret0, _ := ret[0].(*session.PutFavoriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFavorite indicates an expected call of PutFavorite.
func (mr *MockFilmsClientMockRecorder) PutFavorite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFavorite", reflect.TypeOf((*MockFilmsClient)(nil).PutFavorite), varargs...)
}

// RemoveComment mocks base method.
func (m *MockFilmsClient) RemoveComment(ctx context.Context, in *session.RemoveCommentRequest, opts ...grpc.CallOption) (*session.RemoveCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveComment", varargs...)
	ret0, _ := ret[0].(*session.RemoveCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveComment indicates an expected call of RemoveComment.
func (mr *MockFilmsClientMockRecorder) RemoveComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveComment", reflect.TypeOf((*MockFilmsClient)(nil).RemoveComment), varargs...)
}

// RemoveFilmByUuid mocks base method.
func (m *MockFilmsClient) RemoveFilmByUuid(ctx context.Context, in *session.RemoveFilmByUuidRequest, opts ...grpc.CallOption) (*session.RemoveFilmByUuidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFilmByUuid", varargs...)
	ret0, _ := ret[0].(*session.RemoveFilmByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFilmByUuid indicates an expected call of RemoveFilmByUuid.
func (mr *MockFilmsClientMockRecorder) RemoveFilmByUuid(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilmByUuid", reflect.TypeOf((*MockFilmsClient)(nil).RemoveFilmByUuid), varargs...)
}

// MockFilmsServer is a mock of FilmsServer interface.
type MockFilmsServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilmsServerMockRecorder
}

// MockFilmsServerMockRecorder is the mock recorder for MockFilmsServer.
type MockFilmsServerMockRecorder struct {
	mock *MockFilmsServer
}

// NewMockFilmsServer creates a new mock instance.
func NewMockFilmsServer(ctrl *gomock.Controller) *MockFilmsServer {
	mock := &MockFilmsServer{ctrl: ctrl}
	mock.recorder = &MockFilmsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmsServer) EXPECT() *MockFilmsServerMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockFilmsServer) AddComment(arg0 context.Context, arg1 *session.AddCommentRequest) (*session.AddCommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", arg0, arg1)
	ret0, _ := ret[0].(*session.AddCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockFilmsServerMockRecorder) AddComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockFilmsServer)(nil).AddComment), arg0, arg1)
}

// AddFilm mocks base method.
func (m *MockFilmsServer) AddFilm(arg0 context.Context, arg1 *session.AddFilmRequest) (*session.AddFilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilm", arg0, arg1)
	ret0, _ := ret[0].(*session.AddFilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFilm indicates an expected call of AddFilm.
func (mr *MockFilmsServerMockRecorder) AddFilm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilm", reflect.TypeOf((*MockFilmsServer)(nil).AddFilm), arg0, arg1)
}

// DeleteFavorite mocks base method.
func (m *MockFilmsServer) DeleteFavorite(arg0 context.Context, arg1 *session.DeleteFavoriteRequest) (*session.DeleteFavoriteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFavorite", arg0, arg1)
	ret0, _ := ret[0].(*session.DeleteFavoriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFavorite indicates an expected call of DeleteFavorite.
func (mr *MockFilmsServerMockRecorder) DeleteFavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFavorite", reflect.TypeOf((*MockFilmsServer)(nil).DeleteFavorite), arg0, arg1)
}

// FindActorsLong mocks base method.
func (m *MockFilmsServer) FindActorsLong(arg0 context.Context, arg1 *session.FindActorsShortRequest) (*session.FindActorsLongResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActorsLong", arg0, arg1)
	ret0, _ := ret[0].(*session.FindActorsLongResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActorsLong indicates an expected call of FindActorsLong.
func (mr *MockFilmsServerMockRecorder) FindActorsLong(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActorsLong", reflect.TypeOf((*MockFilmsServer)(nil).FindActorsLong), arg0, arg1)
}

// FindActorsShort mocks base method.
func (m *MockFilmsServer) FindActorsShort(arg0 context.Context, arg1 *session.FindActorsShortRequest) (*session.FindActorsShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActorsShort", arg0, arg1)
	ret0, _ := ret[0].(*session.FindActorsShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActorsShort indicates an expected call of FindActorsShort.
func (mr *MockFilmsServerMockRecorder) FindActorsShort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActorsShort", reflect.TypeOf((*MockFilmsServer)(nil).FindActorsShort), arg0, arg1)
}

// FindFilmsLong mocks base method.
func (m *MockFilmsServer) FindFilmsLong(arg0 context.Context, arg1 *session.FindFilmsShortRequest) (*session.FindFilmsLongResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilmsLong", arg0, arg1)
	ret0, _ := ret[0].(*session.FindFilmsLongResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFilmsLong indicates an expected call of FindFilmsLong.
func (mr *MockFilmsServerMockRecorder) FindFilmsLong(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilmsLong", reflect.TypeOf((*MockFilmsServer)(nil).FindFilmsLong), arg0, arg1)
}

// FindFilmsShort mocks base method.
func (m *MockFilmsServer) FindFilmsShort(arg0 context.Context, arg1 *session.FindFilmsShortRequest) (*session.FindFilmsShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilmsShort", arg0, arg1)
	ret0, _ := ret[0].(*session.FindFilmsShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFilmsShort indicates an expected call of FindFilmsShort.
func (mr *MockFilmsServerMockRecorder) FindFilmsShort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilmsShort", reflect.TypeOf((*MockFilmsServer)(nil).FindFilmsShort), arg0, arg1)
}

// FindSerialsLong mocks base method.
func (m *MockFilmsServer) FindSerialsLong(arg0 context.Context, arg1 *session.FindFilmsShortRequest) (*session.FindFilmsLongResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSerialsLong", arg0, arg1)
	ret0, _ := ret[0].(*session.FindFilmsLongResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSerialsLong indicates an expected call of FindSerialsLong.
func (mr *MockFilmsServerMockRecorder) FindSerialsLong(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSerialsLong", reflect.TypeOf((*MockFilmsServer)(nil).FindSerialsLong), arg0, arg1)
}

// FindSerialsShort mocks base method.
func (m *MockFilmsServer) FindSerialsShort(arg0 context.Context, arg1 *session.FindFilmsShortRequest) (*session.FindFilmsShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSerialsShort", arg0, arg1)
	ret0, _ := ret[0].(*session.FindFilmsShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSerialsShort indicates an expected call of FindSerialsShort.
func (mr *MockFilmsServerMockRecorder) FindSerialsShort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSerialsShort", reflect.TypeOf((*MockFilmsServer)(nil).FindSerialsShort), arg0, arg1)
}

// GetActorDataByUuid mocks base method.
func (m *MockFilmsServer) GetActorDataByUuid(arg0 context.Context, arg1 *session.ActorDataByUuidRequest) (*session.ActorDataByUuidResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorDataByUuid", arg0, arg1)
	ret0, _ := ret[0].(*session.ActorDataByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorDataByUuid indicates an expected call of GetActorDataByUuid.
func (mr *MockFilmsServerMockRecorder) GetActorDataByUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorDataByUuid", reflect.TypeOf((*MockFilmsServer)(nil).GetActorDataByUuid), arg0, arg1)
}

// GetActorsByFilm mocks base method.
func (m *MockFilmsServer) GetActorsByFilm(arg0 context.Context, arg1 *session.ActorsByFilmRequest) (*session.ActorsByFilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorsByFilm", arg0, arg1)
	ret0, _ := ret[0].(*session.ActorsByFilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsByFilm indicates an expected call of GetActorsByFilm.
func (mr *MockFilmsServerMockRecorder) GetActorsByFilm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsByFilm", reflect.TypeOf((*MockFilmsServer)(nil).GetActorsByFilm), arg0, arg1)
}

// GetAllFavoriteFilms mocks base method.
func (m *MockFilmsServer) GetAllFavoriteFilms(arg0 context.Context, arg1 *session.GetAllFavoriteFilmsRequest) (*session.GetAllFavoriteFilmsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFavoriteFilms", arg0, arg1)
	ret0, _ := ret[0].(*session.GetAllFavoriteFilmsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFavoriteFilms indicates an expected call of GetAllFavoriteFilms.
func (mr *MockFilmsServerMockRecorder) GetAllFavoriteFilms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFavoriteFilms", reflect.TypeOf((*MockFilmsServer)(nil).GetAllFavoriteFilms), arg0, arg1)
}

// GetAllFilmComments mocks base method.
func (m *MockFilmsServer) GetAllFilmComments(arg0 context.Context, arg1 *session.AllFilmCommentsRequest) (*session.AllFilmCommentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilmComments", arg0, arg1)
	ret0, _ := ret[0].(*session.AllFilmCommentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilmComments indicates an expected call of GetAllFilmComments.
func (mr *MockFilmsServerMockRecorder) GetAllFilmComments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmComments", reflect.TypeOf((*MockFilmsServer)(nil).GetAllFilmComments), arg0, arg1)
}

// GetAllFilmsByGenre mocks base method.
func (m *MockFilmsServer) GetAllFilmsByGenre(arg0 context.Context, arg1 *session.GetAllFilmsByGenreRequest) (*session.GetAllFilmsByGenreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilmsByGenre", arg0, arg1)
	ret0, _ := ret[0].(*session.GetAllFilmsByGenreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilmsByGenre indicates an expected call of GetAllFilmsByGenre.
func (mr *MockFilmsServerMockRecorder) GetAllFilmsByGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmsByGenre", reflect.TypeOf((*MockFilmsServer)(nil).GetAllFilmsByGenre), arg0, arg1)
}

// GetAllFilmsPreviews mocks base method.
func (m *MockFilmsServer) GetAllFilmsPreviews(arg0 context.Context, arg1 *session.AllFilmsPreviewsRequest) (*session.AllFilmsPreviewsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilmsPreviews", arg0, arg1)
	ret0, _ := ret[0].(*session.AllFilmsPreviewsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilmsPreviews indicates an expected call of GetAllFilmsPreviews.
func (mr *MockFilmsServerMockRecorder) GetAllFilmsPreviews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmsPreviews", reflect.TypeOf((*MockFilmsServer)(nil).GetAllFilmsPreviews), arg0, arg1)
}

// GetAllGenres mocks base method.
func (m *MockFilmsServer) GetAllGenres(arg0 context.Context, arg1 *session.GetAllGenresRequest) (*session.GetAllGenresResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGenres", arg0, arg1)
	ret0, _ := ret[0].(*session.GetAllGenresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGenres indicates an expected call of GetAllGenres.
func (mr *MockFilmsServerMockRecorder) GetAllGenres(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGenres", reflect.TypeOf((*MockFilmsServer)(nil).GetAllGenres), arg0, arg1)
}

// GetFilmDataByUuid mocks base method.
func (m *MockFilmsServer) GetFilmDataByUuid(arg0 context.Context, arg1 *session.FilmDataByUuidRequest) (*session.FilmDataByUuidResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmDataByUuid", arg0, arg1)
	ret0, _ := ret[0].(*session.FilmDataByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmDataByUuid indicates an expected call of GetFilmDataByUuid.
func (mr *MockFilmsServerMockRecorder) GetFilmDataByUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmDataByUuid", reflect.TypeOf((*MockFilmsServer)(nil).GetFilmDataByUuid), arg0, arg1)
}

// GetFilmPreviewByUuid mocks base method.
func (m *MockFilmsServer) GetFilmPreviewByUuid(arg0 context.Context, arg1 *session.FilmPreviewByUuidRequest) (*session.FilmPreviewByUuidResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmPreviewByUuid", arg0, arg1)
	ret0, _ := ret[0].(*session.FilmPreviewByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmPreviewByUuid indicates an expected call of GetFilmPreviewByUuid.
func (mr *MockFilmsServerMockRecorder) GetFilmPreviewByUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmPreviewByUuid", reflect.TypeOf((*MockFilmsServer)(nil).GetFilmPreviewByUuid), arg0, arg1)
}

// GetFilmsPreviewsWithSub mocks base method.
func (m *MockFilmsServer) GetFilmsPreviewsWithSub(arg0 context.Context, arg1 *session.AllFilmsPreviewsRequest) (*session.AllFilmsPreviewsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsPreviewsWithSub", arg0, arg1)
	ret0, _ := ret[0].(*session.AllFilmsPreviewsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmsPreviewsWithSub indicates an expected call of GetFilmsPreviewsWithSub.
func (mr *MockFilmsServerMockRecorder) GetFilmsPreviewsWithSub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsPreviewsWithSub", reflect.TypeOf((*MockFilmsServer)(nil).GetFilmsPreviewsWithSub), arg0, arg1)
}

// GetTopFilms mocks base method.
func (m *MockFilmsServer) GetTopFilms(arg0 context.Context, arg1 *session.GetTopFilmsRequest) (*session.GetTopFilmsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopFilms", arg0, arg1)
	ret0, _ := ret[0].(*session.GetTopFilmsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopFilms indicates an expected call of GetTopFilms.
func (mr *MockFilmsServerMockRecorder) GetTopFilms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopFilms", reflect.TypeOf((*MockFilmsServer)(nil).GetTopFilms), arg0, arg1)
}

// PutFavorite mocks base method.
func (m *MockFilmsServer) PutFavorite(arg0 context.Context, arg1 *session.PutFavoriteRequest) (*session.PutFavoriteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFavorite", arg0, arg1)
	ret0, _ := ret[0].(*session.PutFavoriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFavorite indicates an expected call of PutFavorite.
func (mr *MockFilmsServerMockRecorder) PutFavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFavorite", reflect.TypeOf((*MockFilmsServer)(nil).PutFavorite), arg0, arg1)
}

// RemoveComment mocks base method.
func (m *MockFilmsServer) RemoveComment(arg0 context.Context, arg1 *session.RemoveCommentRequest) (*session.RemoveCommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveComment", arg0, arg1)
	ret0, _ := ret[0].(*session.RemoveCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveComment indicates an expected call of RemoveComment.
func (mr *MockFilmsServerMockRecorder) RemoveComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveComment", reflect.TypeOf((*MockFilmsServer)(nil).RemoveComment), arg0, arg1)
}

// RemoveFilmByUuid mocks base method.
func (m *MockFilmsServer) RemoveFilmByUuid(arg0 context.Context, arg1 *session.RemoveFilmByUuidRequest) (*session.RemoveFilmByUuidResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFilmByUuid", arg0, arg1)
	ret0, _ := ret[0].(*session.RemoveFilmByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFilmByUuid indicates an expected call of RemoveFilmByUuid.
func (mr *MockFilmsServerMockRecorder) RemoveFilmByUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilmByUuid", reflect.TypeOf((*MockFilmsServer)(nil).RemoveFilmByUuid), arg0, arg1)
}

// MockUnsafeFilmsServer is a mock of UnsafeFilmsServer interface.
type MockUnsafeFilmsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFilmsServerMockRecorder
}

// MockUnsafeFilmsServerMockRecorder is the mock recorder for MockUnsafeFilmsServer.
type MockUnsafeFilmsServerMockRecorder struct {
	mock *MockUnsafeFilmsServer
}

// NewMockUnsafeFilmsServer creates a new mock instance.
func NewMockUnsafeFilmsServer(ctrl *gomock.Controller) *MockUnsafeFilmsServer {
	mock := &MockUnsafeFilmsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFilmsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFilmsServer) EXPECT() *MockUnsafeFilmsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFilmsServer mocks base method.
func (m *MockUnsafeFilmsServer) mustEmbedUnimplementedFilmsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilmsServer")
}

// mustEmbedUnimplementedFilmsServer indicates an expected call of mustEmbedUnimplementedFilmsServer.
func (mr *MockUnsafeFilmsServerMockRecorder) mustEmbedUnimplementedFilmsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilmsServer", reflect.TypeOf((*MockUnsafeFilmsServer)(nil).mustEmbedUnimplementedFilmsServer))
}
