// Code generated by MockGen. DO NOT EDIT.
// Source: internal/session/proto/films_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=internal/session/proto/films_grpc.pb.go -destination=internal/films/mocks/mock_films_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	session "github.com/go-park-mail-ru/2024_1_Netrunners/internal/session/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFilmsClient is a mock of FilmsClient interface.
type MockFilmsClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilmsClientMockRecorder
}

// MockFilmsClientMockRecorder is the mock recorder for MockFilmsClient.
type MockFilmsClientMockRecorder struct {
	mock *MockFilmsClient
}

// NewMockFilmsClient creates a new mock instance.
func NewMockFilmsClient(ctrl *gomock.Controller) *MockFilmsClient {
	mock := &MockFilmsClient{ctrl: ctrl}
	mock.recorder = &MockFilmsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmsClient) EXPECT() *MockFilmsClientMockRecorder {
	return m.recorder
}

// GetActorDataByUuid mocks base method.
func (m *MockFilmsClient) GetActorDataByUuid(ctx context.Context, in *session.ActorDataByUuidRequest, opts ...grpc.CallOption) (*session.ActorDataByUuidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActorDataByUuid", varargs...)
	ret0, _ := ret[0].(*session.ActorDataByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorDataByUuid indicates an expected call of GetActorDataByUuid.
func (mr *MockFilmsClientMockRecorder) GetActorDataByUuid(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorDataByUuid", reflect.TypeOf((*MockFilmsClient)(nil).GetActorDataByUuid), varargs...)
}

// GetActorsByFilm mocks base method.
func (m *MockFilmsClient) GetActorsByFilm(ctx context.Context, in *session.ActorsByFilmRequest, opts ...grpc.CallOption) (*session.ActorsByFilmResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActorsByFilm", varargs...)
	ret0, _ := ret[0].(*session.ActorsByFilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsByFilm indicates an expected call of GetActorsByFilm.
func (mr *MockFilmsClientMockRecorder) GetActorsByFilm(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsByFilm", reflect.TypeOf((*MockFilmsClient)(nil).GetActorsByFilm), varargs...)
}

// GetAllFilmComments mocks base method.
func (m *MockFilmsClient) GetAllFilmComments(ctx context.Context, in *session.AllFilmCommentsRequest, opts ...grpc.CallOption) (*session.AllFilmCommentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllFilmComments", varargs...)
	ret0, _ := ret[0].(*session.AllFilmCommentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilmComments indicates an expected call of GetAllFilmComments.
func (mr *MockFilmsClientMockRecorder) GetAllFilmComments(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmComments", reflect.TypeOf((*MockFilmsClient)(nil).GetAllFilmComments), varargs...)
}

// GetAllFilmsPreviews mocks base method.
func (m *MockFilmsClient) GetAllFilmsPreviews(ctx context.Context, in *session.AllFilmsPreviewsRequest, opts ...grpc.CallOption) (*session.AllFilmsPreviewsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllFilmsPreviews", varargs...)
	ret0, _ := ret[0].(*session.AllFilmsPreviewsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilmsPreviews indicates an expected call of GetAllFilmsPreviews.
func (mr *MockFilmsClientMockRecorder) GetAllFilmsPreviews(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmsPreviews", reflect.TypeOf((*MockFilmsClient)(nil).GetAllFilmsPreviews), varargs...)
}

// GetFilmDataByUuid mocks base method.
func (m *MockFilmsClient) GetFilmDataByUuid(ctx context.Context, in *session.FilmDataByUuidRequest, opts ...grpc.CallOption) (*session.FilmDataByUuidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFilmDataByUuid", varargs...)
	ret0, _ := ret[0].(*session.FilmDataByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmDataByUuid indicates an expected call of GetFilmDataByUuid.
func (mr *MockFilmsClientMockRecorder) GetFilmDataByUuid(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmDataByUuid", reflect.TypeOf((*MockFilmsClient)(nil).GetFilmDataByUuid), varargs...)
}

// GetFilmPreviewByUuid mocks base method.
func (m *MockFilmsClient) GetFilmPreviewByUuid(ctx context.Context, in *session.FilmPreviewByUuidRequest, opts ...grpc.CallOption) (*session.FilmPreviewByUuidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFilmPreviewByUuid", varargs...)
	ret0, _ := ret[0].(*session.FilmPreviewByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmPreviewByUuid indicates an expected call of GetFilmPreviewByUuid.
func (mr *MockFilmsClientMockRecorder) GetFilmPreviewByUuid(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmPreviewByUuid", reflect.TypeOf((*MockFilmsClient)(nil).GetFilmPreviewByUuid), varargs...)
}

// RemoveFilmByUuid mocks base method.
func (m *MockFilmsClient) RemoveFilmByUuid(ctx context.Context, in *session.RemoveFilmByUuidRequest, opts ...grpc.CallOption) (*session.RemoveFilmByUuidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFilmByUuid", varargs...)
	ret0, _ := ret[0].(*session.RemoveFilmByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFilmByUuid indicates an expected call of RemoveFilmByUuid.
func (mr *MockFilmsClientMockRecorder) RemoveFilmByUuid(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilmByUuid", reflect.TypeOf((*MockFilmsClient)(nil).RemoveFilmByUuid), varargs...)
}

// MockFilmsServer is a mock of FilmsServer interface.
type MockFilmsServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilmsServerMockRecorder
}

// MockFilmsServerMockRecorder is the mock recorder for MockFilmsServer.
type MockFilmsServerMockRecorder struct {
	mock *MockFilmsServer
}

// NewMockFilmsServer creates a new mock instance.
func NewMockFilmsServer(ctrl *gomock.Controller) *MockFilmsServer {
	mock := &MockFilmsServer{ctrl: ctrl}
	mock.recorder = &MockFilmsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmsServer) EXPECT() *MockFilmsServerMockRecorder {
	return m.recorder
}

// GetActorDataByUuid mocks base method.
func (m *MockFilmsServer) GetActorDataByUuid(arg0 context.Context, arg1 *session.ActorDataByUuidRequest) (*session.ActorDataByUuidResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorDataByUuid", arg0, arg1)
	ret0, _ := ret[0].(*session.ActorDataByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorDataByUuid indicates an expected call of GetActorDataByUuid.
func (mr *MockFilmsServerMockRecorder) GetActorDataByUuid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorDataByUuid", reflect.TypeOf((*MockFilmsServer)(nil).GetActorDataByUuid), arg0, arg1)
}

// GetActorsByFilm mocks base method.
func (m *MockFilmsServer) GetActorsByFilm(arg0 context.Context, arg1 *session.ActorsByFilmRequest) (*session.ActorsByFilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorsByFilm", arg0, arg1)
	ret0, _ := ret[0].(*session.ActorsByFilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsByFilm indicates an expected call of GetActorsByFilm.
func (mr *MockFilmsServerMockRecorder) GetActorsByFilm(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsByFilm", reflect.TypeOf((*MockFilmsServer)(nil).GetActorsByFilm), arg0, arg1)
}

// GetAllFilmComments mocks base method.
func (m *MockFilmsServer) GetAllFilmComments(arg0 context.Context, arg1 *session.AllFilmCommentsRequest) (*session.AllFilmCommentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilmComments", arg0, arg1)
	ret0, _ := ret[0].(*session.AllFilmCommentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilmComments indicates an expected call of GetAllFilmComments.
func (mr *MockFilmsServerMockRecorder) GetAllFilmComments(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmComments", reflect.TypeOf((*MockFilmsServer)(nil).GetAllFilmComments), arg0, arg1)
}

// GetAllFilmsPreviews mocks base method.
func (m *MockFilmsServer) GetAllFilmsPreviews(arg0 context.Context, arg1 *session.AllFilmsPreviewsRequest) (*session.AllFilmsPreviewsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilmsPreviews", arg0, arg1)
	ret0, _ := ret[0].(*session.AllFilmsPreviewsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilmsPreviews indicates an expected call of GetAllFilmsPreviews.
func (mr *MockFilmsServerMockRecorder) GetAllFilmsPreviews(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmsPreviews", reflect.TypeOf((*MockFilmsServer)(nil).GetAllFilmsPreviews), arg0, arg1)
}

// GetFilmDataByUuid mocks base method.
func (m *MockFilmsServer) GetFilmDataByUuid(arg0 context.Context, arg1 *session.FilmDataByUuidRequest) (*session.FilmDataByUuidResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmDataByUuid", arg0, arg1)
	ret0, _ := ret[0].(*session.FilmDataByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmDataByUuid indicates an expected call of GetFilmDataByUuid.
func (mr *MockFilmsServerMockRecorder) GetFilmDataByUuid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmDataByUuid", reflect.TypeOf((*MockFilmsServer)(nil).GetFilmDataByUuid), arg0, arg1)
}

// GetFilmPreviewByUuid mocks base method.
func (m *MockFilmsServer) GetFilmPreviewByUuid(arg0 context.Context, arg1 *session.FilmPreviewByUuidRequest) (*session.FilmPreviewByUuidResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmPreviewByUuid", arg0, arg1)
	ret0, _ := ret[0].(*session.FilmPreviewByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmPreviewByUuid indicates an expected call of GetFilmPreviewByUuid.
func (mr *MockFilmsServerMockRecorder) GetFilmPreviewByUuid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmPreviewByUuid", reflect.TypeOf((*MockFilmsServer)(nil).GetFilmPreviewByUuid), arg0, arg1)
}

// RemoveFilmByUuid mocks base method.
func (m *MockFilmsServer) RemoveFilmByUuid(arg0 context.Context, arg1 *session.RemoveFilmByUuidRequest) (*session.RemoveFilmByUuidResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFilmByUuid", arg0, arg1)
	ret0, _ := ret[0].(*session.RemoveFilmByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFilmByUuid indicates an expected call of RemoveFilmByUuid.
func (mr *MockFilmsServerMockRecorder) RemoveFilmByUuid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilmByUuid", reflect.TypeOf((*MockFilmsServer)(nil).RemoveFilmByUuid), arg0, arg1)
}

// mustEmbedUnimplementedFilmsServer mocks base method.
func (m *MockFilmsServer) mustEmbedUnimplementedFilmsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilmsServer")
}

// mustEmbedUnimplementedFilmsServer indicates an expected call of mustEmbedUnimplementedFilmsServer.
func (mr *MockFilmsServerMockRecorder) mustEmbedUnimplementedFilmsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilmsServer", reflect.TypeOf((*MockFilmsServer)(nil).mustEmbedUnimplementedFilmsServer))
}

// MockUnsafeFilmsServer is a mock of UnsafeFilmsServer interface.
type MockUnsafeFilmsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFilmsServerMockRecorder
}

// MockUnsafeFilmsServerMockRecorder is the mock recorder for MockUnsafeFilmsServer.
type MockUnsafeFilmsServerMockRecorder struct {
	mock *MockUnsafeFilmsServer
}

// NewMockUnsafeFilmsServer creates a new mock instance.
func NewMockUnsafeFilmsServer(ctrl *gomock.Controller) *MockUnsafeFilmsServer {
	mock := &MockUnsafeFilmsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFilmsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFilmsServer) EXPECT() *MockUnsafeFilmsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFilmsServer mocks base method.
func (m *MockUnsafeFilmsServer) mustEmbedUnimplementedFilmsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilmsServer")
}

// mustEmbedUnimplementedFilmsServer indicates an expected call of mustEmbedUnimplementedFilmsServer.
func (mr *MockUnsafeFilmsServerMockRecorder) mustEmbedUnimplementedFilmsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilmsServer", reflect.TypeOf((*MockUnsafeFilmsServer)(nil).mustEmbedUnimplementedFilmsServer))
}
