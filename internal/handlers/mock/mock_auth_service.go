// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/auth.go

// Package mock_service is a generated GoMock package.
package mockService

import (
	context "context"
	http "net/http"
	reflect "reflect"

	jwt "github.com/dgrijalva/jwt-go"
	domain "github.com/go-park-mail-ru/2024_1_Netrunners/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// ChangeUserName mocks base method.
func (m *MockAuthService) ChangeUserName(ctx context.Context, email, newName string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserName", ctx, email, newName)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserName indicates an expected call of ChangeUserName.
func (mr *MockAuthServiceMockRecorder) ChangeUserName(ctx, email, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserName",
		reflect.TypeOf((*MockAuthService)(nil).ChangeUserName), ctx, email, newName)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserName", reflect.TypeOf((*MockAuthService)(nil).ChangeUserName), ctx, email, newName)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserName",
		reflect.TypeOf((*MockAuthService)(nil).ChangeUserName), ctx, email, newName)
>>>>>>> 577448e (fixes)
}

// ChangeUserNameByUuid mocks base method.
func (m *MockAuthService) ChangeUserNameByUuid(ctx context.Context, uuid, newName string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserNameByUuid", ctx, uuid, newName)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserNameByUuid indicates an expected call of ChangeUserNameByUuid.
func (mr *MockAuthServiceMockRecorder) ChangeUserNameByUuid(ctx, uuid, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserNameByUuid",
		reflect.TypeOf((*MockAuthService)(nil).ChangeUserNameByUuid), ctx, uuid, newName)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserNameByUuid", reflect.TypeOf((*MockAuthService)(nil).ChangeUserNameByUuid), ctx, uuid, newName)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserNameByUuid",
		reflect.TypeOf((*MockAuthService)(nil).ChangeUserNameByUuid), ctx, uuid, newName)
>>>>>>> 577448e (fixes)
}

// ChangeUserPassword mocks base method.
func (m *MockAuthService) ChangeUserPassword(ctx context.Context, email, newPassword string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPassword", ctx, email, newPassword)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserPassword indicates an expected call of ChangeUserPassword.
func (mr *MockAuthServiceMockRecorder) ChangeUserPassword(ctx, email, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword",
		reflect.TypeOf((*MockAuthService)(nil).ChangeUserPassword), ctx, email, newPassword)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword", reflect.TypeOf((*MockAuthService)(nil).ChangeUserPassword), ctx, email, newPassword)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword",
		reflect.TypeOf((*MockAuthService)(nil).ChangeUserPassword), ctx, email, newPassword)
>>>>>>> 577448e (fixes)
}

// ChangeUserPasswordByUuid mocks base method.
func (m *MockAuthService) ChangeUserPasswordByUuid(ctx context.Context, uuid, newPassword string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPasswordByUuid", ctx, uuid, newPassword)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserPasswordByUuid indicates an expected call of ChangeUserPasswordByUuid.
func (mr *MockAuthServiceMockRecorder) ChangeUserPasswordByUuid(ctx, uuid, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPasswordByUuid",
		reflect.TypeOf((*MockAuthService)(nil).ChangeUserPasswordByUuid), ctx, uuid, newPassword)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPasswordByUuid", reflect.TypeOf((*MockAuthService)(nil).ChangeUserPasswordByUuid), ctx, uuid, newPassword)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPasswordByUuid",
		reflect.TypeOf((*MockAuthService)(nil).ChangeUserPasswordByUuid), ctx, uuid, newPassword)
>>>>>>> 577448e (fixes)
}

// CreateUser mocks base method.
func (m *MockAuthService) CreateUser(ctx context.Context, user domain.UserSignUp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthServiceMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser",
		reflect.TypeOf((*MockAuthService)(nil).CreateUser), ctx, user)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthService)(nil).CreateUser), ctx, user)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser",
		reflect.TypeOf((*MockAuthService)(nil).CreateUser), ctx, user)
>>>>>>> 577448e (fixes)
}

// GenerateTokens mocks base method.
func (m *MockAuthService) GenerateTokens(login string, isAdmin bool, version uint8) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokens", login, isAdmin, version)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTokens indicates an expected call of GenerateTokens.
func (mr *MockAuthServiceMockRecorder) GenerateTokens(login, isAdmin, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokens",
		reflect.TypeOf((*MockAuthService)(nil).GenerateTokens), login, isAdmin, version)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokens", reflect.TypeOf((*MockAuthService)(nil).GenerateTokens), login, isAdmin, version)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokens",
		reflect.TypeOf((*MockAuthService)(nil).GenerateTokens), login, isAdmin, version)
>>>>>>> 577448e (fixes)
}

// GetUser mocks base method.
func (m *MockAuthService) GetUser(ctx context.Context, email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthServiceMockRecorder) GetUser(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser",
		reflect.TypeOf((*MockAuthService)(nil).GetUser), ctx, email)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthService)(nil).GetUser), ctx, email)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser",
		reflect.TypeOf((*MockAuthService)(nil).GetUser), ctx, email)
>>>>>>> 577448e (fixes)
}

// GetUserDataByUuid mocks base method.
func (m *MockAuthService) GetUserDataByUuid(ctx context.Context, uuid string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataByUuid", ctx, uuid)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataByUuid indicates an expected call of GetUserDataByUuid.
func (mr *MockAuthServiceMockRecorder) GetUserDataByUuid(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataByUuid",
		reflect.TypeOf((*MockAuthService)(nil).GetUserDataByUuid), ctx, uuid)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataByUuid", reflect.TypeOf((*MockAuthService)(nil).GetUserDataByUuid), ctx, uuid)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataByUuid",
		reflect.TypeOf((*MockAuthService)(nil).GetUserDataByUuid), ctx, uuid)
>>>>>>> 577448e (fixes)
}

// GetUserPreview mocks base method.
func (m *MockAuthService) GetUserPreview(ctx context.Context, uuid string) (domain.UserPreview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPreview", ctx, uuid)
	ret0, _ := ret[0].(domain.UserPreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPreview indicates an expected call of GetUserPreview.
func (mr *MockAuthServiceMockRecorder) GetUserPreview(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPreview",
		reflect.TypeOf((*MockAuthService)(nil).GetUserPreview), ctx, uuid)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPreview", reflect.TypeOf((*MockAuthService)(nil).GetUserPreview), ctx, uuid)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPreview",
		reflect.TypeOf((*MockAuthService)(nil).GetUserPreview), ctx, uuid)
>>>>>>> 577448e (fixes)
}

// HasUser mocks base method.
func (m *MockAuthService) HasUser(ctx context.Context, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUser", ctx, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasUser indicates an expected call of HasUser.
func (mr *MockAuthServiceMockRecorder) HasUser(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUser",
		reflect.TypeOf((*MockAuthService)(nil).HasUser), ctx, email, password)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUser", reflect.TypeOf((*MockAuthService)(nil).HasUser), ctx, email, password)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUser",
		reflect.TypeOf((*MockAuthService)(nil).HasUser), ctx, email, password)
>>>>>>> 577448e (fixes)
}

// IsTokenValid mocks base method.
func (m *MockAuthService) IsTokenValid(token *http.Cookie) (jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenValid", token)
	ret0, _ := ret[0].(jwt.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTokenValid indicates an expected call of IsTokenValid.
func (mr *MockAuthServiceMockRecorder) IsTokenValid(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenValid",
		reflect.TypeOf((*MockAuthService)(nil).IsTokenValid), token)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenValid", reflect.TypeOf((*MockAuthService)(nil).IsTokenValid), token)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenValid",
		reflect.TypeOf((*MockAuthService)(nil).IsTokenValid), token)
>>>>>>> 577448e (fixes)
}

// RemoveUser mocks base method.
func (m *MockAuthService) RemoveUser(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockAuthServiceMockRecorder) RemoveUser(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser",
		reflect.TypeOf((*MockAuthService)(nil).RemoveUser), ctx, email)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockAuthService)(nil).RemoveUser), ctx, email)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser",
		reflect.TypeOf((*MockAuthService)(nil).RemoveUser), ctx, email)
>>>>>>> 577448e (fixes)
}

// MockSessionService is a mock of SessionService interface.
type MockSessionService struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceMockRecorder
}

// MockSessionServiceMockRecorder is the mock recorder for MockSessionService.
type MockSessionServiceMockRecorder struct {
	mock *MockSessionService
}

// NewMockSessionService creates a new mock instance.
func NewMockSessionService(ctrl *gomock.Controller) *MockSessionService {
	mock := &MockSessionService{ctrl: ctrl}
	mock.recorder = &MockSessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionService) EXPECT() *MockSessionServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSessionService) Add(ctx context.Context, login, token string, version uint8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, login, token, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockSessionServiceMockRecorder) Add(ctx, login, token, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add",
		reflect.TypeOf((*MockSessionService)(nil).Add), ctx, login, token, version)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSessionService)(nil).Add), ctx, login, token, version)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add",
		reflect.TypeOf((*MockSessionService)(nil).Add), ctx, login, token, version)
>>>>>>> 577448e (fixes)
}

// CheckAllUserSessionTokens mocks base method.
func (m *MockSessionService) CheckAllUserSessionTokens(ctx context.Context, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAllUserSessionTokens", ctx, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAllUserSessionTokens indicates an expected call of CheckAllUserSessionTokens.
func (mr *MockSessionServiceMockRecorder) CheckAllUserSessionTokens(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAllUserSessionTokens",
		reflect.TypeOf((*MockSessionService)(nil).CheckAllUserSessionTokens), ctx, login)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAllUserSessionTokens", reflect.TypeOf((*MockSessionService)(nil).CheckAllUserSessionTokens), ctx, login)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAllUserSessionTokens",
		reflect.TypeOf((*MockSessionService)(nil).CheckAllUserSessionTokens), ctx, login)
>>>>>>> 577448e (fixes)
}

// CheckVersion mocks base method.
func (m *MockSessionService) CheckVersion(ctx context.Context, login, token string, usersVersion uint8) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckVersion", ctx, login, token, usersVersion)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckVersion indicates an expected call of CheckVersion.
func (mr *MockSessionServiceMockRecorder) CheckVersion(ctx, login, token, usersVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVersion",
		reflect.TypeOf((*MockSessionService)(nil).CheckVersion), ctx, login, token, usersVersion)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVersion", reflect.TypeOf((*MockSessionService)(nil).CheckVersion), ctx, login, token, usersVersion)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVersion",
		reflect.TypeOf((*MockSessionService)(nil).CheckVersion), ctx, login, token, usersVersion)
>>>>>>> 577448e (fixes)
}

// DeleteSession mocks base method.
func (m *MockSessionService) DeleteSession(ctx context.Context, login, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, login, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionServiceMockRecorder) DeleteSession(ctx, login, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession",
		reflect.TypeOf((*MockSessionService)(nil).DeleteSession), ctx, login, token)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionService)(nil).DeleteSession), ctx, login, token)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession",
		reflect.TypeOf((*MockSessionService)(nil).DeleteSession), ctx, login, token)
>>>>>>> 577448e (fixes)
}

// GetVersion mocks base method.
func (m *MockSessionService) GetVersion(ctx context.Context, login, token string) (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", ctx, login, token)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockSessionServiceMockRecorder) GetVersion(ctx, login, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion",
		reflect.TypeOf((*MockSessionService)(nil).GetVersion), ctx, login, token)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockSessionService)(nil).GetVersion), ctx, login, token)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion",
		reflect.TypeOf((*MockSessionService)(nil).GetVersion), ctx, login, token)
>>>>>>> 577448e (fixes)
}

// HasSession mocks base method.
func (m *MockSessionService) HasSession(ctx context.Context, login, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSession", ctx, login, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasSession indicates an expected call of HasSession.
func (mr *MockSessionServiceMockRecorder) HasSession(ctx, login, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSession",
		reflect.TypeOf((*MockSessionService)(nil).HasSession), ctx, login, token)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSession", reflect.TypeOf((*MockSessionService)(nil).HasSession), ctx, login, token)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSession",
		reflect.TypeOf((*MockSessionService)(nil).HasSession), ctx, login, token)
>>>>>>> 577448e (fixes)
}

// Update mocks base method.
func (m *MockSessionService) Update(ctx context.Context, login, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, login, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSessionServiceMockRecorder) Update(ctx, login, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update",
		reflect.TypeOf((*MockSessionService)(nil).Update), ctx, login, token)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSessionService)(nil).Update), ctx, login, token)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update",
		reflect.TypeOf((*MockSessionService)(nil).Update), ctx, login, token)
>>>>>>> 577448e (fixes)
}
