// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/films.go

// Package mock_service is a generated GoMock package.
package mockService

import (
	context "context"
	reflect "reflect"

	domain "github.com/go-park-mail-ru/2024_1_Netrunners/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockFilmsService is a mock of FilmsService interface.
type MockFilmsService struct {
	ctrl     *gomock.Controller
	recorder *MockFilmsServiceMockRecorder
}

// MockFilmsServiceMockRecorder is the mock recorder for MockFilmsService.
type MockFilmsServiceMockRecorder struct {
	mock *MockFilmsService
}

// NewMockFilmsService creates a new mock instance.
func NewMockFilmsService(ctrl *gomock.Controller) *MockFilmsService {
	mock := &MockFilmsService{ctrl: ctrl}
	mock.recorder = &MockFilmsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmsService) EXPECT() *MockFilmsServiceMockRecorder {
	return m.recorder
}

// AddFilm mocks base method.
func (m *MockFilmsService) AddFilm(ctx context.Context, film domain.FilmDataToAdd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilm", ctx, film)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFilm indicates an expected call of AddFilm.
func (mr *MockFilmsServiceMockRecorder) AddFilm(ctx, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilm",
		reflect.TypeOf((*MockFilmsService)(nil).AddFilm), ctx, film)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilm", reflect.TypeOf((*MockFilmsService)(nil).AddFilm), ctx, film)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilm",
		reflect.TypeOf((*MockFilmsService)(nil).AddFilm), ctx, film)
>>>>>>> 577448e (fixes)
}

// GetAllFilmActors mocks base method.
func (m *MockFilmsService) GetAllFilmActors(ctx context.Context, uuid string) ([]domain.ActorPreview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilmActors", ctx, uuid)
	ret0, _ := ret[0].([]domain.ActorPreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilmActors indicates an expected call of GetAllFilmActors.
func (mr *MockFilmsServiceMockRecorder) GetAllFilmActors(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmActors",
		reflect.TypeOf((*MockFilmsService)(nil).GetAllFilmActors), ctx, uuid)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmActors", reflect.TypeOf((*MockFilmsService)(nil).GetAllFilmActors), ctx, uuid)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmActors",
		reflect.TypeOf((*MockFilmsService)(nil).GetAllFilmActors), ctx, uuid)
>>>>>>> 577448e (fixes)
}

// GetAllFilmComments mocks base method.
func (m *MockFilmsService) GetAllFilmComments(ctx context.Context, uuid string) ([]domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilmComments", ctx, uuid)
	ret0, _ := ret[0].([]domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilmComments indicates an expected call of GetAllFilmComments.
func (mr *MockFilmsServiceMockRecorder) GetAllFilmComments(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmComments",
		reflect.TypeOf((*MockFilmsService)(nil).GetAllFilmComments), ctx, uuid)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmComments", reflect.TypeOf((*MockFilmsService)(nil).GetAllFilmComments), ctx, uuid)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmComments",
		reflect.TypeOf((*MockFilmsService)(nil).GetAllFilmComments), ctx, uuid)
>>>>>>> 577448e (fixes)
}

// GetAllFilmsPreviews mocks base method.
func (m *MockFilmsService) GetAllFilmsPreviews(ctx context.Context) ([]domain.FilmPreview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilmsPreviews", ctx)
	ret0, _ := ret[0].([]domain.FilmPreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilmsPreviews indicates an expected call of GetAllFilmsPreviews.
func (mr *MockFilmsServiceMockRecorder) GetAllFilmsPreviews(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmsPreviews",
		reflect.TypeOf((*MockFilmsService)(nil).GetAllFilmsPreviews), ctx)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmsPreviews", reflect.TypeOf((*MockFilmsService)(nil).GetAllFilmsPreviews), ctx)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilmsPreviews",
		reflect.TypeOf((*MockFilmsService)(nil).GetAllFilmsPreviews), ctx)
>>>>>>> 577448e (fixes)
}

// GetFilmDataByUuid mocks base method.
func (m *MockFilmsService) GetFilmDataByUuid(ctx context.Context, uuid string) (domain.FilmData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmDataByUuid", ctx, uuid)
	ret0, _ := ret[0].(domain.FilmData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmDataByUuid indicates an expected call of GetFilmDataByUuid.
func (mr *MockFilmsServiceMockRecorder) GetFilmDataByUuid(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmDataByUuid",
		reflect.TypeOf((*MockFilmsService)(nil).GetFilmDataByUuid), ctx, uuid)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmDataByUuid", reflect.TypeOf((*MockFilmsService)(nil).GetFilmDataByUuid), ctx, uuid)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmDataByUuid",
		reflect.TypeOf((*MockFilmsService)(nil).GetFilmDataByUuid), ctx, uuid)
>>>>>>> 577448e (fixes)
}

// GetFilmPreview mocks base method.
func (m *MockFilmsService) GetFilmPreview(ctx context.Context, uuid string) (domain.FilmPreview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmPreview", ctx, uuid)
	ret0, _ := ret[0].(domain.FilmPreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmPreview indicates an expected call of GetFilmPreview.
func (mr *MockFilmsServiceMockRecorder) GetFilmPreview(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmPreview",
		reflect.TypeOf((*MockFilmsService)(nil).GetFilmPreview), ctx, uuid)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmPreview", reflect.TypeOf((*MockFilmsService)(nil).GetFilmPreview), ctx, uuid)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmPreview",
		reflect.TypeOf((*MockFilmsService)(nil).GetFilmPreview), ctx, uuid)
>>>>>>> 577448e (fixes)
}

// RemoveFilm mocks base method.
func (m *MockFilmsService) RemoveFilm(ctx context.Context, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFilm", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFilm indicates an expected call of RemoveFilm.
func (mr *MockFilmsServiceMockRecorder) RemoveFilm(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilm",
		reflect.TypeOf((*MockFilmsService)(nil).RemoveFilm), ctx, uuid)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilm", reflect.TypeOf((*MockFilmsService)(nil).RemoveFilm), ctx, uuid)
>>>>>>> cc029ef (handlers-tests)
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilm",
		reflect.TypeOf((*MockFilmsService)(nil).RemoveFilm), ctx, uuid)
>>>>>>> 577448e (fixes)
}
