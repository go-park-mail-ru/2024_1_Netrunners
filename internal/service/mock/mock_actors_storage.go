// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/actorsservice.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/go-park-mail-ru/2024_1_Netrunners/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockActorsStorage is a mock of ActorsStorage interface.
type MockActorsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockActorsStorageMockRecorder
}

// MockActorsStorageMockRecorder is the mock recorder for MockActorsStorage.
type MockActorsStorageMockRecorder struct {
	mock *MockActorsStorage
}

// NewMockActorsStorage creates a new mock instance.
func NewMockActorsStorage(ctrl *gomock.Controller) *MockActorsStorage {
	mock := &MockActorsStorage{ctrl: ctrl}
	mock.recorder = &MockActorsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorsStorage) EXPECT() *MockActorsStorageMockRecorder {
	return m.recorder
}

// GetActorByUuid mocks base method.
func (m *MockActorsStorage) GetActorByUuid(actorUuid string) (domain.ActorData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorByUuid", actorUuid)
	ret0, _ := ret[0].(domain.ActorData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorByUuid indicates an expected call of GetActorByUuid.
func (mr *MockActorsStorageMockRecorder) GetActorByUuid(actorUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorByUuid", reflect.TypeOf((*MockActorsStorage)(nil).GetActorByUuid), actorUuid)
}

// GetActorsByFilm mocks base method.
func (m *MockActorsStorage) GetActorsByFilm(filmUuid string) ([]domain.ActorPreview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorsByFilm", filmUuid)
	ret0, _ := ret[0].([]domain.ActorPreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsByFilm indicates an expected call of GetActorsByFilm.
func (mr *MockActorsStorageMockRecorder) GetActorsByFilm(filmUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsByFilm", reflect.TypeOf((*MockActorsStorage)(nil).GetActorsByFilm), filmUuid)
}
