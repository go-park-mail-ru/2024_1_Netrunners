// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/sessionservice.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MocksessionStorage is a mock of sessionStorage interface.
type MocksessionStorage struct {
	ctrl     *gomock.Controller
	recorder *MocksessionStorageMockRecorder
}

// MocksessionStorageMockRecorder is the mock recorder for MocksessionStorage.
type MocksessionStorageMockRecorder struct {
	mock *MocksessionStorage
}

// NewMocksessionStorage creates a new mock instance.
func NewMocksessionStorage(ctrl *gomock.Controller) *MocksessionStorage {
	mock := &MocksessionStorage{ctrl: ctrl}
	mock.recorder = &MocksessionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksessionStorage) EXPECT() *MocksessionStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MocksessionStorage) Add(login, token string, version uint8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", login, token, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MocksessionStorageMockRecorder) Add(login, token, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MocksessionStorage)(nil).Add), login, token, version)
}

// CheckAllUserSessionTokens mocks base method.
func (m *MocksessionStorage) CheckAllUserSessionTokens(login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAllUserSessionTokens", login)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAllUserSessionTokens indicates an expected call of CheckAllUserSessionTokens.
func (mr *MocksessionStorageMockRecorder) CheckAllUserSessionTokens(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAllUserSessionTokens", reflect.TypeOf((*MocksessionStorage)(nil).CheckAllUserSessionTokens), login)
}

// CheckVersion mocks base method.
func (m *MocksessionStorage) CheckVersion(login, token string, usersVersion uint8) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckVersion", login, token, usersVersion)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckVersion indicates an expected call of CheckVersion.
func (mr *MocksessionStorageMockRecorder) CheckVersion(login, token, usersVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVersion", reflect.TypeOf((*MocksessionStorage)(nil).CheckVersion), login, token, usersVersion)
}

// DeleteSession mocks base method.
func (m *MocksessionStorage) DeleteSession(login, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", login, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MocksessionStorageMockRecorder) DeleteSession(login, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MocksessionStorage)(nil).DeleteSession), login, token)
}

// GetVersion mocks base method.
func (m *MocksessionStorage) GetVersion(login, token string) (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", login, token)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MocksessionStorageMockRecorder) GetVersion(login, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MocksessionStorage)(nil).GetVersion), login, token)
}

// HasSession mocks base method.
func (m *MocksessionStorage) HasSession(login, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSession", login, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasSession indicates an expected call of HasSession.
func (mr *MocksessionStorageMockRecorder) HasSession(login, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSession", reflect.TypeOf((*MocksessionStorage)(nil).HasSession), login, token)
}

// Update mocks base method.
func (m *MocksessionStorage) Update(login, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", login, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MocksessionStorageMockRecorder) Update(login, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MocksessionStorage)(nil).Update), login, token)
}
