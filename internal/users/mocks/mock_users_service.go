// Code generated by MockGen. DO NOT EDIT.
// Source: internal/users/api/api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/go-park-mail-ru/2024_1_Netrunners/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUsersService is a mock of UsersService interface.
type MockUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceMockRecorder
}

// MockUsersServiceMockRecorder is the mock recorder for MockUsersService.
type MockUsersServiceMockRecorder struct {
	mock *MockUsersService
}

// NewMockUsersService creates a new mock instance.
func NewMockUsersService(ctrl *gomock.Controller) *MockUsersService {
	mock := &MockUsersService{ctrl: ctrl}
	mock.recorder = &MockUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersService) EXPECT() *MockUsersServiceMockRecorder {
	return m.recorder
}

// ChangeUserAvatarByUuid mocks base method.
func (m *MockUsersService) ChangeUserAvatarByUuid(ctx context.Context, uuid, newAvatar string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserAvatarByUuid", ctx, uuid, newAvatar)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserAvatarByUuid indicates an expected call of ChangeUserAvatarByUuid.
func (mr *MockUsersServiceMockRecorder) ChangeUserAvatarByUuid(ctx, uuid, newAvatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserAvatarByUuid", reflect.TypeOf((*MockUsersService)(nil).ChangeUserAvatarByUuid), ctx, uuid, newAvatar)
}

// ChangeUserName mocks base method.
func (m *MockUsersService) ChangeUserName(ctx context.Context, email, newName string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserName", ctx, email, newName)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserName indicates an expected call of ChangeUserName.
func (mr *MockUsersServiceMockRecorder) ChangeUserName(ctx, email, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserName", reflect.TypeOf((*MockUsersService)(nil).ChangeUserName), ctx, email, newName)
}

// ChangeUserNameByUuid mocks base method.
func (m *MockUsersService) ChangeUserNameByUuid(ctx context.Context, uuid, newName string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserNameByUuid", ctx, uuid, newName)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserNameByUuid indicates an expected call of ChangeUserNameByUuid.
func (mr *MockUsersServiceMockRecorder) ChangeUserNameByUuid(ctx, uuid, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserNameByUuid", reflect.TypeOf((*MockUsersService)(nil).ChangeUserNameByUuid), ctx, uuid, newName)
}

// ChangeUserPassword mocks base method.
func (m *MockUsersService) ChangeUserPassword(ctx context.Context, email, newPassword string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPassword", ctx, email, newPassword)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserPassword indicates an expected call of ChangeUserPassword.
func (mr *MockUsersServiceMockRecorder) ChangeUserPassword(ctx, email, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword", reflect.TypeOf((*MockUsersService)(nil).ChangeUserPassword), ctx, email, newPassword)
}

// ChangeUserPasswordByUuid mocks base method.
func (m *MockUsersService) ChangeUserPasswordByUuid(ctx context.Context, uuid, newPassword string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPasswordByUuid", ctx, uuid, newPassword)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserPasswordByUuid indicates an expected call of ChangeUserPasswordByUuid.
func (mr *MockUsersServiceMockRecorder) ChangeUserPasswordByUuid(ctx, uuid, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPasswordByUuid", reflect.TypeOf((*MockUsersService)(nil).ChangeUserPasswordByUuid), ctx, uuid, newPassword)
}

// CreateUser mocks base method.
func (m *MockUsersService) CreateUser(ctx context.Context, user domain.UserSignUp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersServiceMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersService)(nil).CreateUser), ctx, user)
}

// GetSubscription mocks base method.
func (m *MockUsersService) GetSubscription(ctx context.Context, uuid string) (domain.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", ctx, uuid)
	ret0, _ := ret[0].(domain.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockUsersServiceMockRecorder) GetSubscription(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockUsersService)(nil).GetSubscription), ctx, uuid)
}

// GetSubscriptions mocks base method.
func (m *MockUsersService) GetSubscriptions(ctx context.Context) ([]domain.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptions", ctx)
	ret0, _ := ret[0].([]domain.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptions indicates an expected call of GetSubscriptions.
func (mr *MockUsersServiceMockRecorder) GetSubscriptions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptions", reflect.TypeOf((*MockUsersService)(nil).GetSubscriptions), ctx)
}

// GetUser mocks base method.
func (m *MockUsersService) GetUser(ctx context.Context, email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUsersServiceMockRecorder) GetUser(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUsersService)(nil).GetUser), ctx, email)
}

// GetUserDataByUuid mocks base method.
func (m *MockUsersService) GetUserDataByUuid(ctx context.Context, uuid string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataByUuid", ctx, uuid)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataByUuid indicates an expected call of GetUserDataByUuid.
func (mr *MockUsersServiceMockRecorder) GetUserDataByUuid(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataByUuid", reflect.TypeOf((*MockUsersService)(nil).GetUserDataByUuid), ctx, uuid)
}

// GetUserPreview mocks base method.
func (m *MockUsersService) GetUserPreview(ctx context.Context, uuid string) (domain.UserPreview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPreview", ctx, uuid)
	ret0, _ := ret[0].(domain.UserPreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPreview indicates an expected call of GetUserPreview.
func (mr *MockUsersServiceMockRecorder) GetUserPreview(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPreview", reflect.TypeOf((*MockUsersService)(nil).GetUserPreview), ctx, uuid)
}

// HasSubscription mocks base method.
func (m *MockUsersService) HasSubscription(ctx context.Context, uuid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSubscription", ctx, uuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSubscription indicates an expected call of HasSubscription.
func (mr *MockUsersServiceMockRecorder) HasSubscription(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSubscription", reflect.TypeOf((*MockUsersService)(nil).HasSubscription), ctx, uuid)
}

// HasUser mocks base method.
func (m *MockUsersService) HasUser(ctx context.Context, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUser", ctx, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasUser indicates an expected call of HasUser.
func (mr *MockUsersServiceMockRecorder) HasUser(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUser", reflect.TypeOf((*MockUsersService)(nil).HasUser), ctx, email, password)
}

// PaySubscription mocks base method.
func (m *MockUsersService) PaySubscription(ctx context.Context, uuid, subId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaySubscription", ctx, uuid, subId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaySubscription indicates an expected call of PaySubscription.
func (mr *MockUsersServiceMockRecorder) PaySubscription(ctx, uuid, subId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaySubscription", reflect.TypeOf((*MockUsersService)(nil).PaySubscription), ctx, uuid, subId)
}

// RemoveUser mocks base method.
func (m *MockUsersService) RemoveUser(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockUsersServiceMockRecorder) RemoveUser(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockUsersService)(nil).RemoveUser), ctx, email)
}
